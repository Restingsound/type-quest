{"version":3,"sources":["reducers/gameReducer.js","store.js","components/Header.js","components/Baddie.js","components/PlayerInput.js","components/HandDisplay.js","components/UnstyledButtonCustom.js","components/ChoiceButton.js","components/GameScreen.js","App.js","index.js"],"names":["startingCommands","id","name","damage","damageType","longText","allCommands","allRelics","type","initialState","playerLife","score","lifeStatus","scoreStatus","lifeChangeCurrentTick","lifeChangeStartTick","scoreChangeStartTick","scoreChangeCurrentTick","playerStatus","monName","attackSpeed","attackStartTicks","attackCurrentTicks","attackPercent","monsterHP","monsterHPMax","monsterHPPer","dyingStartTicks","dyingCurrentTicks","status","level","stage","stageKills","stages","killTarget","tier","reward","monsters","hp","gameState","monsterSpawnRate","monsterSpawnCurrent","lastAttackName","optionList","commands","relics","deck","hand","discard","handSize","paused","shuffle","array","i","length","j","Math","floor","random","temp","pauseGame","data","reducer","state","action","game","newDyingCurrentTicks","newAttackCurrentTicks","newPercent","newMonName","newNamePointer","namePointer","newStatus","newMonsterSpawnCurrent","newAttackSpeed","newDamage","newLevel","newStage","newStageKills","newGameState","newOptions","newDeck","newHand","newDiscard","newHandSize","newMonsterHP","newMonsterHPMax","newMonsterHPPer","newCommands","JSON","parse","stringify","newScore","newScoreStatus","newLifeStatus","newLifeChangeCurrentTick","newScoreChangeCurrentTick","newPlayerLife","newPlayerStatus","newRelics","number","x","console","log","y","push","pop","aliveBaddies","firstOpenSpot","monNum","newMon","option","forEach","command","split","reverse","join","option1","option2","option3","opt","card","filter","fCard","mon","firstFound","lastFound","splice","e","combineReducers","gameReducer","store","createStore","applyMiddleware","thunk","Header","useSelector","badStyle","background","fill","width","textAlign","noStyle","goodStyle","lifeStyle","scoreStyle","style","Baddie","dispatch","useDispatch","idText","nameContainerStyle","border","padding","margin","borderWidth","position","nameDyingStyle","fontWeight","marginTop","height","display","justifyContent","alignItems","nameStyle","nameBlackBarStyle","top","hpBarStyle","imageBackgroundStyle","paddingTop","NameDisplay","useEffect","setAttack","Container","maxWidth","disableGutters","sx","minWidth","minHeight","backgroundColor","borderRadius","fontSize","src","alt","PlayerInput","inputRef","useRef","undefined","current","focus","value","TextField","label","variant","autoComplete","autoFocus","onChange","event","matchFound","cardDetails","target","disabled","fullWidth","HandDisplay","cardBorder","cardTitle","blackBarStyle","cardText","Stack","direction","spacing","map","cardId","index","ButtonRoot","React","props","ref","children","other","d","className","CustomButtonRoot","styled","theme","palette","mode","buttonUnstyledClasses","focusVisible","active","SvgButton","ButtonUnstyled","component","UnstyledButtonCustom","ChoiceButton","chooseOptionClicked","onClick","GameScreen","startGame","gameEndContainerStyle","Button","size","optionChoiceStyle","App","useState","tickTimer","setTimer","setPaused","tickFunction","setInterval","pauseClicked","clearInterval","PauseDisplay","PauseContainer","ButtonFrame","focusRipple","PauseImageSrc","PlayImageSrc","right","TitleContainer","TopContainer","ButtonBase","left","bottom","backgroundSize","backgroundImage","fontFamily","ReactDOM","render","Fragment","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.50586ea6.chunk.js","sourcesContent":["const gameDataAtStart = {\r\n  playerLife: 100,\r\n  score: 0,\r\n  lifeStatus: \"STABLE\",\r\n  scoreStatus: \"STABLE\",\r\n  lifeChangeCurrentTick: 0,\r\n  lifeChangeStartTick: 3,\r\n  scoreChangeStartTick: 3,\r\n  scoreChangeCurrentTick: 0,\r\n  playerStatus: \"INIT\",\r\n  monName: [\"\", \"\", \"\", \"\"],\r\n  attackSpeed: [1, 1, 1, 1],\r\n  attackStartTicks: [50, 50, 50, 50],\r\n  attackCurrentTicks: [50, 50, 50, 50],\r\n  attackPercent: [0, 0, 0, 0],\r\n  monsterHP: [0, 0, 0, 0],\r\n  monsterHPMax: [0, 0, 0, 0],\r\n  monsterHPPer: [0, 0, 0, 0],\r\n  dyingStartTicks: 15,\r\n  dyingCurrentTicks: [15, 15, 15, 15],\r\n  status: [\"DEAD\", \"DEAD\", \"DEAD\", \"DEAD\"],\r\n  damage: [0, 0, 0, 0],\r\n  level: 1,\r\n  stage: 1,\r\n  stageKills: 0,\r\n  stages: [\r\n    {\r\n      id: 0,\r\n      name: \"Peaceful Village\",\r\n      longText: \"Clear out the monsters pestering this little village.\",\r\n      killTarget: 5,\r\n      tier: 0,\r\n      reward: \"CARD\",\r\n      monsters: [\r\n        { name: \"rat\", attackSpeed: 0.5, damage: 20, hp: 5 },\r\n        { name: \"slime\", attackSpeed: 0.5, damage: 15, hp: 10 },\r\n        { name: \"goblin\", attackSpeed: 0.5, damage: 25, hp: 19 },\r\n      ],\r\n    },\r\n    {\r\n      id: 1,\r\n      name: \"Snow Level\",\r\n      longText: \"More dangerous monsters in the icy North.\",\r\n      killTarget: 5,\r\n      tier: 0,\r\n      reward: \"CARD\",\r\n      monsters: [\r\n        { name: \"Snowman\", attackSpeed: 1, damage: 25, hp: 6 },\r\n        { name: \"Ice Sculptor\", attackSpeed: 1, damage: 20, hp: 15 },\r\n        { name: \"Yeti\", attackSpeed: 1, damage: 30, hp: 45 },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Space Level\",\r\n      longText: \"Launch into space and explore new frontiers\",\r\n      killTarget: 5,\r\n      tier: 0,\r\n      reward: \"CARD\",\r\n      monsters: [\r\n        { name: \"Asteroid\", attackSpeed: 1, damage: 25, hp: 34 },\r\n        { name: \"Space Marine\", attackSpeed: 1, damage: 20, hp: 86 },\r\n        { name: \"Alien\", attackSpeed: 1, damage: 30, hp: 68 },\r\n      ],\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Underwater Level\",\r\n      longText: \"Monsters are better, down where its wetter, under the sea.\",\r\n      killTarget: 5,\r\n      tier: 0,\r\n      reward: \"RELIC\",\r\n      monsters: [\r\n        { name: \"Shark\", attackSpeed: 1, damage: 25, hp: 40 },\r\n        { name: \"Mermaid\", attackSpeed: 1, damage: 20, hp: 33 },\r\n        { name: \"Real Big Crab\", attackSpeed: 1, damage: 30, hp: 26 },\r\n      ],\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Boss Level\",\r\n      longText: \"Fight the big boss to win the game.\",\r\n      killTarget: 1,\r\n      tier: 1,\r\n      reward: \"VICTORY\",\r\n      monsters: [\r\n        { name: \"Sentient React App\", attackSpeed: 2, damage: 25, hp: 150 },\r\n      ],\r\n    },\r\n  ],\r\n  gameState: \"INIT\",\r\n  monsterSpawnRate: 30,\r\n  monsterSpawnCurrent: 30,\r\n  lastAttackName: \"rat\",\r\n  optionList: [\r\n    { name: \"\", longText: \"\", id: 0, reward: \"\" },\r\n    { name: \"\", longText: \"\", id: 0, reward: \"\" },\r\n    { name: \"\", longText: \"\", id: 0, reward: \"\" },\r\n  ],\r\n  commands: [],\r\n  relics: [],\r\n  deck: [],\r\n  hand: [],\r\n  discard: [],\r\n  handSize: 4,\r\n  paused: false,\r\n};\r\n\r\nconst startingCommands = [\r\n  {\r\n    id: 0,\r\n    name: \"strike\",\r\n    damage: 20,\r\n    damageType: \"FIRST\",\r\n    longText: \"Hit the first enemy for\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"shoot\",\r\n    damage: 20,\r\n    damageType: \"LAST\",\r\n    longText: \"Hit the last enemy for\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"blast\",\r\n    damage: 5,\r\n    damageType: \"ALL\",\r\n    longText: \"Hit the all enemies for\",\r\n  },\r\n];\r\n\r\nconst allCommands = [\r\n  {\r\n    id: 0,\r\n    name: \"strike\",\r\n    damage: 20,\r\n    damageType: \"FIRST\",\r\n    longText: \"Hit the first enemy for\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"shoot\",\r\n    damage: 20,\r\n    damageType: \"LAST\",\r\n    longText: \"Hit the last enemy for\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"blast\",\r\n    damage: 5,\r\n    damageType: \"ALL\",\r\n    longText: \"Hit the all enemies for\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"giga blast\",\r\n    damage: 40,\r\n    damageType: \"ALL\",\r\n    longText: \"Hit the all enemies for\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"execute\",\r\n    damage: 80,\r\n    damageType: \"FIRST\",\r\n    longText: \"Hit the first enemy for\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"precise shot\",\r\n    damage: 80,\r\n    damageType: \"LAST\",\r\n    longText: \"Hit the last enemy for\",\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"wide slash\",\r\n    damage: 20,\r\n    damageType: \"ALL\",\r\n    longText: \"Hit the all enemies for\",\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"punch\",\r\n    damage: 3,\r\n    damageType: \"FIRST\",\r\n    longText: \"Hit the first enemy for\",\r\n  },\r\n];\r\n\r\nconst allRelics = [\r\n  {\r\n    id: 0,\r\n    name: \"Big Sword\",\r\n    damage: 20,\r\n    type: \"FIRST\",\r\n    longText: \"Increase damage to first enemy attacks by 20\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Big Gun\",\r\n    damage: 20,\r\n    type: \"LAST\",\r\n    longText: \"Increase damage to last enemy attacks by 20\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Dynamite\",\r\n    damage: 20,\r\n    type: \"ALL\",\r\n    longText: \"Increase damage to all enemy attacks by 20\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Re-Qwerty\",\r\n    damage: 0,\r\n    type: \"REQWERTY\",\r\n    longText: \"Reverse all Commands, Double all damage\",\r\n  },\r\n];\r\n\r\nconst bossLevel = 5;\r\nconst initialState = gameDataAtStart;\r\n\r\nfunction shuffle(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  return array;\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const game = state;\r\n  let newBaddies = state;\r\n  let newDyingCurrentTicks = [...game.dyingCurrentTicks];\r\n  let newAttackCurrentTicks = [...game.attackCurrentTicks];\r\n  let newPercent = [...game.attackPercent];\r\n  let newMonName = [...game.monName];\r\n  let newNamePointer = game.namePointer;\r\n  let newStatus = [...game.status];\r\n  let newMonsterSpawnCurrent = game.monsterSpawnCurrent;\r\n  let newAttackSpeed = [...game.attackSpeed];\r\n  let newDamage = [...game.damage];\r\n  let newLevel = game.level;\r\n  let newStage = game.stage;\r\n  let newStageKills = game.stageKills;\r\n  let newGameState = game.gameState;\r\n  let newOptions = [...game.optionList];\r\n  let newDeck = [...game.deck];\r\n  let newHand = [...game.hand];\r\n  let newDiscard = [...game.discard];\r\n  let newHandSize = game.handSize;\r\n  let newMonsterHP = [...game.monsterHP];\r\n  let newMonsterHPMax = [...game.monsterHPMax];\r\n  let newMonsterHPPer = [...game.monsterHPPer];\r\n  let newCommands = JSON.parse(JSON.stringify(game.commands));\r\n  let newScore = game.score;\r\n  let newScoreStatus = game.scoreStatus;\r\n  let newLifeStatus = game.lifeStatus;\r\n  let newLifeChangeCurrentTick = game.lifeChangeCurrentTick;\r\n  let newScoreChangeCurrentTick = game.scoreChangeCurrentTick;\r\n  let newPlayerLife = game.playerLife;\r\n  let newPlayerStatus = game.playerStatus;\r\n  let newRelics = [...game.relics];\r\n\r\n  switch (action.type) {\r\n    case \"SET_ATTACK_TIMER\":\r\n      newAttackCurrentTicks[action.data.id] = action.data.number;\r\n      newPercent[action.data.id] = 100;\r\n      return {\r\n        ...state,\r\n        attackCurrentTicks: newAttackCurrentTicks,\r\n        attackPercent: newPercent,\r\n        lastAttackName: game.monName[action.data.id],\r\n      };\r\n\r\n    case \"START_NEW_GAME\":\r\n      newDeck = [0, 0, 0, 1, 1, 1, 2, 2, 2];\r\n      newDeck = shuffle(newDeck);\r\n      newCommands = JSON.parse(JSON.stringify(startingCommands));\r\n      return {\r\n        ...state,\r\n        monName: [\"\", \"\", \"\", \"\"],\r\n        attackSpeed: [1, 1, 1, 1],\r\n        attackCurrentTicks: [50, 50, 50, 50],\r\n        attackPercent: [100, 100, 100, 100],\r\n        dyingCurrentTicks: [15, 15, 15, 15],\r\n        status: [\"DEAD\", \"DEAD\", \"DEAD\", \"DEAD\"],\r\n        damage: [20, 20, 20, 20],\r\n        stage: 0,\r\n        stageKills: 0,\r\n        monsterSpawnRate: 30,\r\n        monsterSpawnCurrent: 5,\r\n        gameState: \"PLAYING\",\r\n        deck: newDeck,\r\n        hand: [],\r\n        discard: [],\r\n        handSize: 4,\r\n        playerLife: 100,\r\n        score: 0,\r\n        lifeStatus: \"STABLE\",\r\n        scoreStatus: \"STABLE\",\r\n        lifeChangeCurrentTick: 0,\r\n        scoreChangeCurrentTick: 0,\r\n        playerStatus: \"ALIVE\",\r\n        level: 0,\r\n        paused: false,\r\n        commands: newCommands,\r\n        relics: [],\r\n      };\r\n\r\n    case \"PAUSE_GAME\":\r\n      return {\r\n        ...state,\r\n        paused: action.data.paused,\r\n      };\r\n\r\n    case \"TICK_PLAYER\":\r\n      if (newLifeStatus !== \"STABLE\") {\r\n        if (game.playerLife > 0) {\r\n          newLifeChangeCurrentTick -= 1;\r\n        }\r\n        if (newLifeChangeCurrentTick <= 0) {\r\n          newLifeStatus = \"STABLE\";\r\n        }\r\n      }\r\n\r\n      if (newScoreStatus !== \"STABLE\") {\r\n        newScoreChangeCurrentTick -= 1;\r\n        if (newScoreChangeCurrentTick <= 0) {\r\n          newScoreStatus = \"STABLE\";\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        scoreStatus: newScoreStatus,\r\n        lifeStatus: newLifeStatus,\r\n        lifeChangeCurrentTick: newLifeChangeCurrentTick,\r\n        scoreChangeCurrentTick: newScoreChangeCurrentTick,\r\n      };\r\n\r\n    case \"TICK_BADDIES\":\r\n      if (game.gameState === \"PLAYING\") {\r\n        for (let x = 0; x < 4; x++) {\r\n          if (game.status[x] === \"ALIVE\") {\r\n            newAttackCurrentTicks[x] -= game.attackSpeed[x];\r\n            if (newAttackCurrentTicks[x] < 0) {\r\n              newAttackCurrentTicks[x] = 0;\r\n            }\r\n            newPercent[x] =\r\n              (newAttackCurrentTicks[x] / game.attackStartTicks[x]) * 100;\r\n          } else if (game.status[x] === \"DYING\") {\r\n            newDyingCurrentTicks[x] -= 1;\r\n            console.log(newDyingCurrentTicks[x]);\r\n            if (newDyingCurrentTicks[x] <= 0) {\r\n              newStatus[x] = \"DEAD\";\r\n              for (let y = x + 1; y < 4; y++) {\r\n                if (newStatus[y] !== \"DEAD\") {\r\n                  newAttackCurrentTicks[y - 1] = newAttackCurrentTicks[y];\r\n                  newDyingCurrentTicks[y - 1] = newDyingCurrentTicks[y];\r\n                  newPercent[y - 1] = newPercent[y];\r\n                  newMonName[y - 1] = newMonName[y];\r\n                  newStatus[y - 1] = newStatus[y];\r\n                  newMonsterHP[y - 1] = newMonsterHP[y];\r\n                  newMonsterHPMax[y - 1] = newMonsterHPMax[y];\r\n                  newMonsterHPPer[y - 1] = newMonsterHPPer[y];\r\n                  newAttackSpeed[y - 1] = newAttackSpeed[y];\r\n                  newDamage[y - 1] = newDamage[y];\r\n                  newStatus[y] = \"DEAD\";\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      newBaddies = {\r\n        ...state,\r\n        dyingCurrentTicks: newDyingCurrentTicks,\r\n        attackCurrentTicks: newAttackCurrentTicks,\r\n        attackPercent: newPercent,\r\n        monName: newMonName,\r\n        namePointer: newNamePointer,\r\n        status: newStatus,\r\n        monsterHP: newMonsterHP,\r\n        monsterHPMax: newMonsterHPMax,\r\n        monsterHPPer: newMonsterHPPer,\r\n        damage: newDamage,\r\n        attackSpeed: newAttackSpeed,\r\n      };\r\n      return newBaddies;\r\n\r\n    case \"TICK_LEVEL\":\r\n      if (game.gameState === \"PLAYING\") {\r\n        while (newHand.length < newHandSize) {\r\n          if (newDeck.length === 0) {\r\n            newDeck = shuffle([...newDiscard]);\r\n            newDiscard = [];\r\n          }\r\n          newHand.push(newDeck.pop());\r\n        }\r\n\r\n        let aliveBaddies = 0;\r\n        let firstOpenSpot = -1;\r\n        for (let x = 0; x < 4; x++) {\r\n          if (game.status[x] !== \"DEAD\") {\r\n            aliveBaddies += 1;\r\n          } else {\r\n            if (firstOpenSpot === -1) {\r\n              firstOpenSpot = x;\r\n            }\r\n          }\r\n        }\r\n        if (\r\n          (aliveBaddies < 1 && game.level === bossLevel) ||\r\n          (aliveBaddies < 4 && game.level !== bossLevel)\r\n        ) {\r\n          newMonsterSpawnCurrent -= 1;\r\n          if (newMonsterSpawnCurrent <= 0) {\r\n            newMonsterSpawnCurrent = game.monsterSpawnRate;\r\n            //select new monster\r\n            const monNum = Math.floor(\r\n              Math.random() * game.stages[newStage].monsters.length\r\n            );\r\n            const newMon = game.stages[newStage].monsters[monNum];\r\n\r\n            //place monster at position aliveBaddies\r\n            newAttackCurrentTicks[firstOpenSpot] =\r\n              game.attackStartTicks[firstOpenSpot];\r\n            newPercent[firstOpenSpot] = 100;\r\n            newMonName[firstOpenSpot] = newMon.name;\r\n            newAttackSpeed[firstOpenSpot] = newMon.attackSpeed;\r\n            newDamage[firstOpenSpot] = newMon.damage;\r\n            newStatus[firstOpenSpot] = \"ALIVE\";\r\n            newMonsterHP[firstOpenSpot] = newMon.hp;\r\n            newMonsterHPMax[firstOpenSpot] = newMon.hp;\r\n            newMonsterHPPer[firstOpenSpot] = 100;\r\n          }\r\n        }\r\n      }\r\n\r\n      newBaddies = {\r\n        ...state,\r\n        attackCurrentTicks: newAttackCurrentTicks,\r\n        attackPercent: newPercent,\r\n        monName: newMonName,\r\n        status: newStatus,\r\n        monsterSpawnCurrent: newMonsterSpawnCurrent,\r\n        damage: newDamage,\r\n        attackSpeed: newAttackSpeed,\r\n        deck: newDeck,\r\n        hand: newHand,\r\n        discard: newDiscard,\r\n        handSize: newHandSize,\r\n        monsterHP: newMonsterHP,\r\n        monsterHPMax: newMonsterHPMax,\r\n        monsterHPPer: newMonsterHPPer,\r\n      };\r\n      return newBaddies;\r\n\r\n    case \"APPLY_DAMAGE\":\r\n      newPlayerLife = game.playerLife - action.data.number;\r\n      if (newPlayerLife <= 0) {\r\n        newPlayerLife = 0;\r\n        newPlayerStatus = \"DEAD\";\r\n      }\r\n      return {\r\n        ...state,\r\n        playerLife: newPlayerLife,\r\n        lifeStatus: \"RED\",\r\n        lifeChangeCurrentTick: game.lifeChangeStartTick,\r\n        playerStatus: newPlayerStatus,\r\n      };\r\n\r\n    case \"SET_GAME_STATE\":\r\n      return {\r\n        ...state,\r\n        gameState: action.data.gameState,\r\n      };\r\n\r\n    case \"CHOOSE_OPTION\":\r\n      if (game.gameState === \"BETWEEN_LEVELS\") {\r\n        newGameState = \"PLAYING\";\r\n        newStage = action.data.option;\r\n      }\r\n      if (game.gameState === \"BEFORE_BOSS\") {\r\n        newGameState = \"PLAYING\";\r\n        newStage = action.data.option;\r\n      }\r\n      if (\r\n        game.gameState === \"CARD_REWARD_CHOICE\" ||\r\n        game.gameState === \"RELIC_REWARD_CHOICE\"\r\n      ) {\r\n        switch (game.stages[newStage].reward) {\r\n          case \"CARD\":\r\n            // if reward choice is a new card add it to available commands, and deck\r\n            newCommands.push(allCommands[action.data.option]);\r\n            newDeck.push(allCommands[action.data.option].id);\r\n            newDeck = shuffle(newDeck);\r\n            break;\r\n          case \"RELIC\":\r\n            newRelics.push(allRelics[action.data.option].id);\r\n            switch (allRelics[action.data.option].type) {\r\n              case \"FIRST\":\r\n                newCommands.forEach((command) => {\r\n                  if (command.damageType === \"FIRST\") {\r\n                    command.damage += allRelics[action.data.option].damage;\r\n                  }\r\n                });\r\n                break;\r\n              case \"LAST\":\r\n                newCommands.forEach((command) => {\r\n                  if (command.damageType === \"LAST\") {\r\n                    command.damage += allRelics[action.data.option].damage;\r\n                  }\r\n                });\r\n                break;\r\n              case \"ALL\":\r\n                newCommands.forEach((command) => {\r\n                  if (command.damageType === \"ALL\") {\r\n                    command.damage += allRelics[action.data.option].damage;\r\n                  }\r\n                });\r\n                break;\r\n              case \"REQWERTY\":\r\n                newCommands.forEach((command) => {\r\n                  command.damage *= 2;\r\n                  command.name = command.name.split(\"\").reverse().join(\"\");\r\n                });\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        // after processing reward go to level choice\r\n        let option1;\r\n        let option2;\r\n        let option3;\r\n        let opt;\r\n        if (newLevel === bossLevel) {\r\n          //next level is boss level\r\n          newGameState = \"BEFORE_BOSS\";\r\n          newOptions[0].name = game.stages[4].name;\r\n          newOptions[0].longText = game.stages[4].longText;\r\n          newOptions[0].id = game.stages[4].id;\r\n          newOptions[0].reward = \"VICTORY\";\r\n          newOptions[1].name = \"\";\r\n          newOptions[1].longText = \"\";\r\n          newOptions[1].id = \"\";\r\n          newOptions[1].reward = \"\";\r\n          newOptions[2].name = \"\";\r\n          newOptions[2].longText = \"\";\r\n          newOptions[2].id = \"\";\r\n          newOptions[2].reward = \"\";\r\n        } else {\r\n          newGameState = \"BETWEEN_LEVELS\";\r\n          option1 = -1;\r\n          option2 = -1;\r\n          option3 = -1;\r\n          opt = 0;\r\n          while (option1 === -1) {\r\n            opt = Math.floor(Math.random() * game.stages.length - 1);\r\n            option1 = opt;\r\n          }\r\n          while (option2 === -1) {\r\n            opt = Math.floor(Math.random() * game.stages.length - 1);\r\n            if (opt !== option1) {\r\n              option2 = opt;\r\n            }\r\n          }\r\n          while (option3 === -1) {\r\n            opt = Math.floor(Math.random() * game.stages.length - 1);\r\n            if (opt !== option1 && opt !== option2) {\r\n              option3 = opt;\r\n            }\r\n          }\r\n          newOptions[0].name = game.stages[option1].name;\r\n          newOptions[0].longText = game.stages[option1].longText;\r\n          newOptions[0].id = game.stages[option1].id;\r\n          newOptions[0].reward = game.stages[option1].reward;\r\n          newOptions[1].name = game.stages[option2].name;\r\n          newOptions[1].longText = game.stages[option2].longText;\r\n          newOptions[1].id = game.stages[option2].id;\r\n          newOptions[1].reward = game.stages[option2].reward;\r\n          newOptions[2].name = game.stages[option3].name;\r\n          newOptions[2].longText = game.stages[option3].longText;\r\n          newOptions[2].id = game.stages[option3].id;\r\n          newOptions[2].reward = game.stages[option3].reward;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        stage: newStage,\r\n        gameState: newGameState,\r\n        optionList: newOptions,\r\n        commands: newCommands,\r\n        deck: newDeck,\r\n        relics: newRelics,\r\n      };\r\n\r\n    case \"USE_CARD\":\r\n      const card = game.commands.filter(\r\n        (fCard) => fCard.id === newHand[action.data.id]\r\n      )[0];\r\n      switch (card.damageType) {\r\n        case \"ALL\":\r\n          for (let mon = 0; mon < 4; mon++) {\r\n            if (newStatus[mon] === \"ALIVE\") {\r\n              newMonsterHP[mon] -= card.damage;\r\n              if (newMonsterHP[mon] <= 0) {\r\n                newMonsterHP[mon] = 0;\r\n                newMonsterHPPer[mon] = 0;\r\n                newStatus[mon] = \"DYING\";\r\n                newDyingCurrentTicks[mon] = game.dyingStartTicks;\r\n                newStageKills += 1;\r\n                newScore = newScore + 1;\r\n                newScoreStatus = \"GREEN\";\r\n              } else {\r\n                newMonsterHPPer[mon] =\r\n                  (newMonsterHP[mon] / newMonsterHPMax[mon]) * 100;\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        case \"FIRST\":\r\n          let firstFound = false;\r\n          for (let mon = 0; mon < 4; mon++) {\r\n            if (newStatus[mon] === \"ALIVE\" && firstFound === false) {\r\n              firstFound = true;\r\n              newMonsterHP[mon] -= card.damage;\r\n              if (newMonsterHP[mon] <= 0) {\r\n                newMonsterHP[mon] = 0;\r\n                newMonsterHPPer[mon] = 0;\r\n                newStatus[mon] = \"DYING\";\r\n                newDyingCurrentTicks[mon] = game.dyingStartTicks;\r\n                newStageKills += 1;\r\n                newScore = newScore + 1;\r\n                newScoreStatus = \"GREEN\";\r\n              } else {\r\n                newMonsterHPPer[mon] =\r\n                  (newMonsterHP[mon] / newMonsterHPMax[mon]) * 100;\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        case \"LAST\":\r\n          let lastFound = false;\r\n          for (let mon = 3; mon > -1; mon--) {\r\n            if (newStatus[mon] === \"ALIVE\" && lastFound === false) {\r\n              lastFound = true;\r\n              newMonsterHP[mon] -= card.damage;\r\n              if (newMonsterHP[mon] <= 0) {\r\n                newMonsterHP[mon] = 0;\r\n                newMonsterHPPer[mon] = 0;\r\n                newStatus[mon] = \"DYING\";\r\n                newDyingCurrentTicks[mon] = game.dyingStartTicks;\r\n                newStageKills += 1;\r\n                newScore = newScore + 1;\r\n                newScoreStatus = \"GREEN\";\r\n              } else {\r\n                newMonsterHPPer[mon] =\r\n                  (newMonsterHP[mon] / newMonsterHPMax[mon]) * 100;\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      newDiscard.push(newHand[action.data.id]);\r\n      newHand.splice(action.data.id, 1);\r\n\r\n      if (game.stages[newStage].killTarget <= newStageKills) {\r\n        newLevel += 1;\r\n        newStatus = [\"DEAD\", \"DEAD\", \"DEAD\", \"DEAD\"];\r\n        newStageKills = 0;\r\n\r\n        //empty hand and discard pile back into deck\r\n        newDiscard.forEach((e) => newDeck.push(e));\r\n        newHand.forEach((e) => newDeck.push(e));\r\n        newDiscard = [];\r\n        newHand = [];\r\n\r\n        let option1;\r\n        let option2;\r\n        let option3;\r\n        let opt;\r\n        switch (game.stages[newStage].reward) {\r\n          case \"CARD\":\r\n            newGameState = \"CARD_REWARD_CHOICE\";\r\n            option1 = -1;\r\n            option2 = -1;\r\n            option3 = -1;\r\n            opt = 0;\r\n            while (option1 === -1) {\r\n              opt = Math.floor(Math.random() * allCommands.length);\r\n              option1 = opt;\r\n            }\r\n            while (option2 === -1) {\r\n              opt = Math.floor(Math.random() * allCommands.length);\r\n              if (opt !== option1) {\r\n                option2 = opt;\r\n              }\r\n            }\r\n            while (option3 === -1) {\r\n              opt = Math.floor(Math.random() * allCommands.length);\r\n              if (opt !== option1 && opt !== option2) {\r\n                option3 = opt;\r\n              }\r\n            }\r\n            newOptions[0].name = allCommands[option1].name;\r\n            newOptions[0].longText =\r\n              allCommands[option1].longText +\r\n              \" \" +\r\n              allCommands[option1].damage +\r\n              \" damage.\";\r\n            newOptions[0].id = allCommands[option1].id;\r\n            newOptions[1].name = allCommands[option2].name;\r\n            newOptions[1].longText =\r\n              allCommands[option2].longText +\r\n              \" \" +\r\n              allCommands[option2].damage +\r\n              \" damage.\";\r\n            newOptions[1].id = allCommands[option2].id;\r\n            newOptions[2].name = allCommands[option3].name;\r\n            newOptions[2].longText =\r\n              allCommands[option3].longText +\r\n              \" \" +\r\n              allCommands[option3].damage +\r\n              \" damage.\";\r\n            newOptions[2].id = allCommands[option3].id;\r\n            break;\r\n          case \"RELIC\":\r\n            newGameState = \"RELIC_REWARD_CHOICE\";\r\n            option1 = -1;\r\n            option2 = -1;\r\n            option3 = -1;\r\n            opt = 0;\r\n            while (option1 === -1) {\r\n              opt = Math.floor(Math.random() * allRelics.length);\r\n              option1 = opt;\r\n            }\r\n            while (option2 === -1) {\r\n              opt = Math.floor(Math.random() * allRelics.length);\r\n              if (opt !== option1) {\r\n                option2 = opt;\r\n              }\r\n            }\r\n            while (option3 === -1) {\r\n              opt = Math.floor(Math.random() * allRelics.length);\r\n              if (opt !== option1 && opt !== option2) {\r\n                option3 = opt;\r\n              }\r\n            }\r\n            newOptions[0].name = allRelics[option1].name;\r\n            newOptions[0].longText = allRelics[option1].longText;\r\n            newOptions[0].id = allRelics[option1].id;\r\n            newOptions[1].name = allRelics[option2].name;\r\n            newOptions[1].longText = allRelics[option2].longText;\r\n            newOptions[1].id = allRelics[option2].id;\r\n            newOptions[2].name = allRelics[option3].name;\r\n            newOptions[2].longText = allRelics[option3].longText;\r\n            newOptions[2].id = allRelics[option3].id;\r\n            break;\r\n          case \"VICTORY\":\r\n            newGameState = \"VICTORY\";\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        level: newLevel,\r\n        stage: newStage,\r\n        status: newStatus,\r\n        stageKills: newStageKills,\r\n        dyingCurrentTicks: newDyingCurrentTicks,\r\n        gameState: newGameState,\r\n        optionList: newOptions,\r\n        monsterHP: newMonsterHP,\r\n        monsterHPPer: newMonsterHPPer,\r\n        deck: newDeck,\r\n        hand: newHand,\r\n        discard: newDiscard,\r\n        score: newScore,\r\n        scoreStatus: newScoreStatus,\r\n        scoreChangeCurrentTick: game.scoreChangeStartTick,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setAttack = (id, number) => {\r\n  return {\r\n    type: \"SET_ATTACK_TIMER\",\r\n    data: {\r\n      id: id,\r\n      number: number,\r\n    },\r\n  };\r\n};\r\n\r\nexport const tickAttack = () => {\r\n  return {\r\n    type: \"TICK_BADDIES\",\r\n    data: {},\r\n  };\r\n};\r\n\r\nexport const tickLevel = () => {\r\n  return {\r\n    type: \"TICK_LEVEL\",\r\n    data: {},\r\n  };\r\n};\r\n\r\nexport const castCard = (id) => {\r\n  return {\r\n    type: \"USE_CARD\",\r\n    data: { id: id },\r\n  };\r\n};\r\n\r\nexport const startNewGame = () => {\r\n  return {\r\n    type: \"START_NEW_GAME\",\r\n    data: {},\r\n  };\r\n};\r\n\r\nexport const chooseOption = (option) => {\r\n  return {\r\n    type: \"CHOOSE_OPTION\",\r\n    data: { option: option },\r\n  };\r\n};\r\n\r\nexport const setGameState = (gameState) => {\r\n  return {\r\n    type: \"SET_GAME_STATE\",\r\n    data: { gameState: gameState },\r\n  };\r\n};\r\n\r\nexport const applyDamage = (number) => {\r\n  return {\r\n    type: \"APPLY_DAMAGE\",\r\n    data: { number: number },\r\n  };\r\n};\r\n\r\nexport const tickPlayer = () => {\r\n  return {\r\n    type: \"TICK_PLAYER\",\r\n    data: {},\r\n  };\r\n};\r\n\r\nexport const pauseGame = (paused) => {\r\n  return {\r\n    type: \"PAUSE_GAME\",\r\n    data: { paused: paused },\r\n  };\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n//import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport gameReducer from \"./reducers/gameReducer\";\r\n\r\nconst reducer = combineReducers({\r\n  game: gameReducer,\r\n});\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Header = () => {\r\n  const game = useSelector((state) => state.game);\r\n  const badStyle = {\r\n    background: \"red\",\r\n    fill: \"solid\",\r\n    width: \"200px\",\r\n    textAlign: \"left\",\r\n  };\r\n\r\n  const noStyle = {\r\n    fill: \"solid\",\r\n    width: \"200px\",\r\n    textAlign: \"left\",\r\n  };\r\n\r\n  const goodStyle = {\r\n    background: \"lime\",\r\n    fill: \"solid\",\r\n    width: \"200px\",\r\n    textAlign: \"left\",\r\n  };\r\n\r\n  let lifeStyle = noStyle;\r\n  if (game.lifeStatus === \"RED\") {\r\n    lifeStyle = badStyle;\r\n  }\r\n  if (game.lifeStatus === \"GREEN\") {\r\n    lifeStyle = goodStyle;\r\n  }\r\n\r\n  let scoreStyle = noStyle;\r\n  if (game.scoreStatus === \"RED\") {\r\n    scoreStyle = badStyle;\r\n  }\r\n  if (game.scoreStatus === \"GREEN\") {\r\n    scoreStyle = goodStyle;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td style={noStyle}>Level {game.level}</td>\r\n            <td style={noStyle}>Zone: {game.stages[game.stage].name}</td>\r\n          </tr>\r\n          <tr>\r\n            <td style={lifeStyle}>Health: {game.playerLife}</td>\r\n            <td style={scoreStyle}>Score: {game.score}</td>\r\n            <td style={noStyle}></td>\r\n            <td style={noStyle}></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setAttack, applyDamage } from \"../reducers/gameReducer\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\nconst swordIcon = \"images/sword.png\";\r\n\r\nconst Baddie = (id) => {\r\n  const dispatch = useDispatch();\r\n  const game = useSelector((state) => state.game);\r\n  const idText = id.id;\r\n\r\n  const nameContainerStyle = {\r\n    border: \"none\",\r\n    padding: 0,\r\n    margin: 0,\r\n    borderWidth: 0,\r\n    fill: \"solid\",\r\n    width: \"100px\",\r\n    position: \"relative\",\r\n  };\r\n\r\n  const nameDyingStyle = {\r\n    background: \"gray\",\r\n    fill: \"solid\",\r\n    width: \"100px\",\r\n    border: \"none\",\r\n    padding: 0,\r\n    fontWeight: \"bold\",\r\n    marginTop: 18,\r\n    height: 48,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n  const nameStyle = {\r\n    width: \"100px\",\r\n    fontWeight: \"bold\",\r\n    padding: 0,\r\n    marginTop: 18,\r\n    height: 48,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n  const nameBlackBarStyle = {\r\n    padding: 0,\r\n    borderWidth: 0,\r\n    border: \"none\",\r\n    background: \"black\",\r\n    width: 100,\r\n    position: \"absolute\",\r\n    top: 0,\r\n    height: 2,\r\n  };\r\n  const hpBarContainerStyle = {\r\n    border: \"none\",\r\n    padding: 0,\r\n    margin: 0,\r\n    borderWidth: 0,\r\n    fill: \"solid\",\r\n    width: \"100px\",\r\n    position: \"relative\",\r\n  };\r\n  const hpBarStyle = {\r\n    padding: 0,\r\n    borderWidth: 0,\r\n    border: \"none\",\r\n    background: \"red\",\r\n    width: `${game.monsterHPPer[idText]}%`,\r\n    position: \"absolute\",\r\n    height: 16,\r\n  };\r\n\r\n  const hpBlackBarStyle = {\r\n    padding: 0,\r\n    borderWidth: 0,\r\n    border: \"none\",\r\n    background: \"black\",\r\n    width: 100,\r\n    position: \"absolute\",\r\n    top: 16,\r\n    height: 3,\r\n  };\r\n  const hpTextStyle = {\r\n    width: \"100px\",\r\n    fontWeight: \"bold\",\r\n    position: \"absolute\",\r\n    border: \"solid\",\r\n    padding: 0,\r\n    borderWidth: 0,\r\n    fontSize: 12,\r\n  };\r\n\r\n  const imageContainerStyle = {\r\n    paddingTop: 0,\r\n    top: 18,\r\n    width: \"100px\",\r\n    height: \"50px\",\r\n    border: \"none\",\r\n    padding: 0,\r\n    borderWidth: 1,\r\n    fill: \"solid\",\r\n    position: \"relative\",\r\n    background: \"orange\",\r\n  };\r\n  const imageBackgroundStyle = {\r\n    paddingTop: 0,\r\n    top: 22,\r\n    width: \"100px\",\r\n    background: \"white\",\r\n    height: `${game.attackPercent[idText]}%`,\r\n  };\r\n\r\n  const blankStyle = {\r\n    border: \"none\",\r\n    padding: 0,\r\n    borderWidth: 1,\r\n    fill: \"solid\",\r\n    width: \"100px\",\r\n  };\r\n\r\n  const NameDisplay = () => {\r\n    if (game.status[idText] === \"ALIVE\") {\r\n      return (\r\n        <div style={nameContainerStyle}>\r\n          <div style={nameBlackBarStyle}>&nbsp;</div>\r\n          <div style={nameStyle}>{game.monName[idText]}</div>\r\n        </div>\r\n      );\r\n    } else if (game.status[idText] === \"DYING\") {\r\n      return (\r\n        <div style={nameContainerStyle}>\r\n          <div style={nameBlackBarStyle}>&nbsp;</div>\r\n          <div style={nameDyingStyle}>{game.monName[idText]}</div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      game.attackCurrentTicks[idText] === 0 &&\r\n      game.status[idText] === \"ALIVE\"\r\n    ) {\r\n      if (game.playerLife > 0) {\r\n        dispatch(applyDamage(game.damage[idText]));\r\n        dispatch(setAttack(idText, game.attackStartTicks[idText]));\r\n      }\r\n    }\r\n  });\r\n  if (game.status[idText] === \"ALIVE\" || game.status[idText] === \"DYING\") {\r\n    return (\r\n      <Container\r\n        maxWidth=\"false\"\r\n        disableGutters\r\n        sx={{\r\n          minWidth: 104,\r\n          maxWidth: 104,\r\n          minHeight: 120,\r\n          backgroundColor: \"white\",\r\n          border: 2,\r\n          borderRadius: 1,\r\n          padding: 0,\r\n        }}\r\n      >\r\n        <div style={hpBarContainerStyle}>\r\n          <div style={hpBarStyle}>&nbsp;</div>\r\n          <div style={hpTextStyle}>{game.monsterHP[idText]}</div>\r\n          <div style={hpBlackBarStyle}>&nbsp;</div>\r\n        </div>\r\n        <div style={imageContainerStyle}>\r\n          <div style={imageBackgroundStyle}>\r\n            <img src={swordIcon} alt=\"baddie\" height=\"50px\"></img>\r\n          </div>\r\n        </div>\r\n        <NameDisplay />\r\n      </Container>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div style={blankStyle}>&nbsp;</div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Baddie;\r\n","import { TextField } from \"@mui/material\";\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { castCard } from \"../reducers/gameReducer\";\r\n\r\nconst PlayerInput = () => {\r\n  const dispatch = useDispatch();\r\n  const game = useSelector((state) => state.game);\r\n  const handleChange = (event) => {\r\n    let matchFound = false;\r\n    for (let x = 0; x < game.handSize; x++) {\r\n      const cardDetails = game.commands.filter(\r\n        (card) => card.id === game.hand[x]\r\n      )[0];\r\n      if (\r\n        event.target.value === cardDetails.name &&\r\n        cardDetails.name !== \"\" &&\r\n        game.playerLife > 0 &&\r\n        matchFound === false\r\n      ) {\r\n        matchFound = true;\r\n        dispatch(castCard(x));\r\n      }\r\n    }\r\n    if (matchFound) {\r\n      event.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  const playerInputStyle = {\r\n    height: 120,\r\n    width: 200,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n\r\n  const inputRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // current property is refered to input element\r\n    if (game.paused === false && inputRef.current !== undefined) {\r\n      inputRef.current.focus();\r\n    }\r\n    if (game.paused === true && inputRef.current !== undefined) {\r\n      inputRef.current.value = \"\";\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div style={playerInputStyle}>\r\n      <TextField\r\n        label=\"Type Card Name\"\r\n        variant=\"outlined\"\r\n        autoComplete=\"off\"\r\n        autoFocus\r\n        name=\"playerDataEntry\"\r\n        onChange={handleChange}\r\n        disabled={game.paused}\r\n        inputRef={inputRef}\r\n        fullWidth\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerInput;\r\n","import { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\nconst HandDisplay = () => {\r\n  const gameState = useSelector((state) => state.game);\r\n\r\n  const cardBorder = {\r\n    border: \"solid\",\r\n    borderWidth: 3,\r\n    borderRadius: 5,\r\n    background: \"#c7ede8\",\r\n    fill: \"solid\",\r\n    width: \"150px\",\r\n    height: \"100px\",\r\n  };\r\n\r\n  const cardTitle = {\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n  };\r\n\r\n  const blackBarStyle = {\r\n    padding: 0,\r\n    borderWidth: 0,\r\n    border: \"none\",\r\n    background: \"black\",\r\n    width: 146,\r\n    position: \"relative\",\r\n    top: 0,\r\n    height: 2,\r\n  };\r\n\r\n  const cardText = {\r\n    padding: 4,\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      maxWidth=\"false\"\r\n      disableGutters\r\n      sx={{\r\n        minWidth: 800,\r\n        maxWidth: 800,\r\n        minHeight: 200,\r\n        border: 0,\r\n        borderRadius: 0,\r\n        padding: 0,\r\n      }}\r\n    >\r\n      <Stack direction=\"row\" spacing={2}>\r\n        {gameState.hand.map((cardId, index) => (\r\n          <div key={index}>\r\n            <div style={cardBorder}>\r\n              <div style={cardTitle}>\r\n                {\r\n                  gameState.commands.filter((card) => card.id === cardId)[0]\r\n                    .name\r\n                }\r\n              </div>\r\n              <div style={blackBarStyle}>&nbsp;</div>\r\n              <div style={cardText}>\r\n                {\r\n                  gameState.commands.filter((card) => card.id === cardId)[0]\r\n                    .longText\r\n                }\r\n                &nbsp;\r\n                <b>\r\n                  {\r\n                    gameState.commands.filter((card) => card.id === cardId)[0]\r\n                      .damage\r\n                  }\r\n                </b>\r\n                &nbsp;damage.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default HandDisplay;\r\n","import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ButtonUnstyled, {\r\n  buttonUnstyledClasses,\r\n} from \"@mui/core/ButtonUnstyled\";\r\nimport { styled } from \"@mui/system\";\r\n\r\nconst ButtonRoot = React.forwardRef(function ButtonRoot(props, ref) {\r\n  const { children, ...other } = props;\r\n\r\n  return (\r\n    <svg width=\"150\" height=\"150\" {...other} ref={ref}>\r\n      <path\r\n        d=\"M20,0 h110 a20,20 0 0 1 20,20 v110 a20,20 0 0 1 -20,20 h-110 a20,20 0 0 1 -20,-20 v-110 a20,20 0 0 1 20,-20 z\"\r\n        className=\"bg\"\r\n      />\r\n      <path\r\n        d=\"M20,0 h110 a20,20 0 0 1 20,20 v110 a20,20 0 0 1 -20,20 h-110 a20,20 0 0 1 -20,-20 v-110 a20,20 0 0 1 20,-20 z\"\r\n        className=\"borderEffect\"\r\n      />\r\n      <foreignObject x=\"0\" y=\"0\" width=\"150\" height=\"150\">\r\n        <div className=\"content\">{children}</div>\r\n      </foreignObject>\r\n    </svg>\r\n  );\r\n});\r\n\r\nButtonRoot.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nconst CustomButtonRoot = styled(ButtonRoot)(\r\n  ({ theme }) => `\r\n  overflow: visible;\r\n  cursor: pointer;\r\n  --main-color: ${\r\n    theme.palette.mode === \"light\" ? \"rgb(25,118,210)\" : \"rgb(144,202,249)\"\r\n  };\r\n  --hover-color: ${\r\n    theme.palette.mode === \"light\"\r\n      ? \"rgba(25,118,210,0.04)\"\r\n      : \"rgba(144,202,249,0.08)\"\r\n  };\r\n  --active-color: ${\r\n    theme.palette.mode === \"light\"\r\n      ? \"rgba(25,118,210,0.12)\"\r\n      : \"rgba(144,202,249,0.24)\"\r\n  };\r\n\r\n  & path {\r\n    fill: transparent;\r\n    transition: all 800ms ease;\r\n    pointer-events: none;\r\n  }\r\n  \r\n  & .bg {\r\n    stroke: var(--main-color);\r\n    stroke-width: 0.5;\r\n    filter: drop-shadow(0 4px 20px rgba(0, 0, 0, 0.1));\r\n    fill: transparent;\r\n  }\r\n\r\n  & .borderEffect {\r\n    stroke: var(--main-color);\r\n    stroke-width: 2;\r\n    stroke-dasharray: 150 600;\r\n    stroke-dashoffset: 150;\r\n    fill: transparent;\r\n  }\r\n\r\n  &:hover,\r\n  &.${buttonUnstyledClasses.focusVisible} {\r\n    .borderEffect {\r\n      stroke-dashoffset: -600;\r\n    }\r\n\r\n    .bg {\r\n      fill: var(--hover-color);\r\n    }\r\n  }\r\n\r\n  &:focus,\r\n  &.${buttonUnstyledClasses.focusVisible} {\r\n    outline: none;\r\n  }\r\n\r\n  &.${buttonUnstyledClasses.active} { \r\n    & .bg {\r\n      fill: var(--active-color);\r\n      transition: fill 300ms ease-out;\r\n    }\r\n  }\r\n\r\n  & foreignObject {\r\n    pointer-events: none;\r\n\r\n    & .content {\r\n      font-family: Helvetica, Inter, Arial, sans-serif;\r\n      font-size: 14px;\r\n      font-weight: 200;\r\n      height: 100%;\r\n      display: fixed;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: var(--main-color);\r\n    }\r\n\r\n    & svg {\r\n      margin: 0 5px;\r\n    }\r\n  }`\r\n);\r\n\r\nconst SvgButton = React.forwardRef(function SvgButton(props, ref) {\r\n  return <ButtonUnstyled {...props} component={CustomButtonRoot} ref={ref} />;\r\n});\r\n\r\nexport default function UnstyledButtonCustom(props) {\r\n  const { children } = props;\r\n  return <SvgButton {...props}>{children}</SvgButton>;\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { chooseOption } from \"../reducers/gameReducer\";\r\nimport UnstyledButtonCustom from \"./UnstyledButtonCustom\";\r\n\r\nconst ChoiceButton = (id) => {\r\n  const dispatch = useDispatch();\r\n  const game = useSelector((state) => state.game);\r\n  const idText = id.id;\r\n\r\n  const chooseOptionClicked = (event) => {\r\n    dispatch(chooseOption(event.target.id));\r\n  };\r\n\r\n  if (game.gameState === \"CARD_REWARD_CHOICE\") {\r\n    return (\r\n      <div>\r\n        <UnstyledButtonCustom\r\n          onClick={chooseOptionClicked}\r\n          id={game.optionList[idText].id}\r\n        >\r\n          <b>{game.optionList[idText].name}</b>\r\n          <br />\r\n          <br />\r\n          {game.optionList[idText].longText}\r\n        </UnstyledButtonCustom>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"BETWEEN_LEVELS\") {\r\n    return (\r\n      <div>\r\n        <UnstyledButtonCustom\r\n          onClick={chooseOptionClicked}\r\n          id={game.optionList[idText].id}\r\n        >\r\n          <b>{game.optionList[idText].name}</b>\r\n          <br />\r\n          <br />\r\n          {game.optionList[idText].longText}\r\n          <br />\r\n          <br />\r\n          <b>Reward: </b>\r\n          {game.optionList[idText].reward}\r\n        </UnstyledButtonCustom>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"RELIC_REWARD_CHOICE\") {\r\n    return (\r\n      <div>\r\n        <UnstyledButtonCustom\r\n          onClick={chooseOptionClicked}\r\n          id={game.optionList[idText].id}\r\n        >\r\n          {game.optionList[idText].name}\r\n          <br />\r\n          <br />\r\n          {game.optionList[idText].longText}\r\n        </UnstyledButtonCustom>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"BEFORE_BOSS\") {\r\n    return (\r\n      <div>\r\n        <UnstyledButtonCustom\r\n          onClick={chooseOptionClicked}\r\n          id={game.optionList[idText].id}\r\n        >\r\n          {game.optionList[idText].name}\r\n          <br />\r\n          <br />\r\n          {game.optionList[idText].longText}\r\n          <br />\r\n          <br />\r\n          Reward: {game.optionList[idText].reward}\r\n        </UnstyledButtonCustom>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ChoiceButton;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Header from \"./Header\";\r\nimport Baddie from \"./Baddie\";\r\nimport PlayerInput from \"./PlayerInput\";\r\nimport HandDisplay from \"./HandDisplay\";\r\nimport ChoiceButton from \"./ChoiceButton\";\r\nimport { setGameState, startNewGame } from \"../reducers/gameReducer\";\r\n\r\nconst GameScreen = () => {\r\n  const dispatch = useDispatch();\r\n  const game = useSelector((state) => state.game);\r\n\r\n  const startGame = () => {\r\n    dispatch(startNewGame());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (game.playerStatus === \"DEAD\" && game.gameState === \"PLAYING\") {\r\n      dispatch(setGameState(\"GAME_OVER\"));\r\n    }\r\n  });\r\n\r\n  const gameEndContainerStyle = {\r\n    height: 325,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n\r\n  const instructionsStyle = {\r\n    display: \"fixed\",\r\n    textAlign: \"left\",\r\n  };\r\n\r\n  if (game.gameState === \"INIT\") {\r\n    return (\r\n      <div style={gameEndContainerStyle}>\r\n        <div>\r\n          <div style={instructionsStyle}>\r\n            Type the names of your cards on the bottom of the screen to use\r\n            them. <br />\r\n            Every time you use a card a new one will be drawn from your deck.\r\n            <br />\r\n            Deck is shuffled from discard pile when empty.\r\n            <br />\r\n            <br />\r\n            Monsters will attack every time their orange bar fills up.\r\n            <br />\r\n            <br />\r\n            Add cards to your deck or powerful relics after each stage.\r\n            <br />\r\n            <br />\r\n            If your health drops to 0 you lose.\r\n            <br />\r\n            <br />\r\n            Complete 5 Levels to reach the boss.\r\n            <br />\r\n            <br />\r\n          </div>\r\n          <Button variant=\"contained\" onClick={startGame} size=\"small\">\r\n            Start\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const optionChoiceStyle = {\r\n    height: 120,\r\n    width: 150,\r\n  };\r\n\r\n  if (game.gameState === \"PLAYING\") {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <table width=\"100%\">\r\n          <tbody>\r\n            <tr>\r\n              <td width=\"200px\">\r\n                <PlayerInput />\r\n              </td>\r\n              <td width=\"2%\"></td>\r\n              <td>\r\n                <Baddie id=\"0\" />\r\n              </td>\r\n              <td>\r\n                <Baddie id=\"1\" />\r\n              </td>\r\n              <td>\r\n                <Baddie id=\"2\" />\r\n              </td>\r\n              <td>\r\n                <Baddie id=\"3\" />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <HandDisplay />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"BETWEEN_LEVELS\") {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <table width=\"100%\">\r\n          <tbody>\r\n            <tr>\r\n              <td style={optionChoiceStyle}>Select Next Level</td>\r\n              <td width=\"10%\"></td>\r\n              <td>\r\n                <ChoiceButton id=\"0\" />\r\n              </td>\r\n              <td>\r\n                <ChoiceButton id=\"1\" />\r\n              </td>\r\n              <td>\r\n                <ChoiceButton id=\"2\" />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"BEFORE_BOSS\") {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <table width=\"100%\">\r\n          <tbody>\r\n            <tr>\r\n              <td style={optionChoiceStyle}>\r\n                Prepare to face the ultimate challenge\r\n              </td>\r\n              <td width=\"10%\"></td>\r\n              <td>\r\n                <ChoiceButton id=\"0\" />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"CARD_REWARD_CHOICE\") {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <table width=\"100%\">\r\n          <tbody>\r\n            <tr>\r\n              <td style={optionChoiceStyle}>\r\n                Select a card to add to your deck.\r\n              </td>\r\n              <td width=\"10%\"></td>\r\n              <td>\r\n                <ChoiceButton id=\"0\" />\r\n              </td>\r\n              <td>\r\n                <ChoiceButton id=\"1\" />\r\n              </td>\r\n              <td>\r\n                <ChoiceButton id=\"2\" />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"RELIC_REWARD_CHOICE\") {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <table width=\"100%\">\r\n          <tbody>\r\n            <tr>\r\n              <td style={optionChoiceStyle}>Select a relic to empower you.</td>\r\n              <td width=\"10%\"></td>\r\n              <td>\r\n                <ChoiceButton id=\"0\" />\r\n              </td>\r\n              <td>\r\n                <ChoiceButton id=\"1\" />\r\n              </td>\r\n              <td>\r\n                <ChoiceButton id=\"2\" />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"GAME_OVER\") {\r\n    return (\r\n      <div style={gameEndContainerStyle}>\r\n        <div>\r\n          You were killed by a {game.lastAttackName}\r\n          <br />\r\n          <br />\r\n          Score = {game.score} Game Over.\r\n          <br /> <br />\r\n          <Button variant=\"contained\" onClick={startGame} size=\"small\">\r\n            Play Again?\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (game.gameState === \"VICTORY\") {\r\n    return (\r\n      <div style={gameEndContainerStyle}>\r\n        <div>\r\n          You beat the game!\r\n          <br />\r\n          <br />\r\n          Thanks for playing.\r\n          <br />\r\n          <br />\r\n          Final Score = {game.score}\r\n          <br /> <br />\r\n          <Button variant=\"contained\" onClick={startGame} size=\"small\">\r\n            Play Again?\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      Initializing...\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameScreen;\r\n","import React, { useState } from \"react\";\n\nimport GameScreen from \"./components/GameScreen\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  tickAttack,\n  tickLevel,\n  tickPlayer,\n  pauseGame,\n} from \"./reducers/gameReducer\";\n\nimport ButtonBase from \"@mui/material/ButtonBase\";\nimport Container from \"@mui/material/Container\";\nimport { styled } from \"@mui/material/styles\";\n\nconst pauseIcon = \"images/Pause-icon.png\";\nconst playIcon = \"images/Play-icon.png\";\n\nconst App = () => {\n  const [tickTimer, setTimer] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  const dispatch = useDispatch();\n  const tickFunction = () => {\n    dispatch(tickAttack());\n    dispatch(tickPlayer());\n    dispatch(tickLevel());\n  };\n\n  if (tickTimer === 0) {\n    setTimer(setInterval(tickFunction, 100));\n  }\n\n  const pauseClicked = () => {\n    if (paused === false) {\n      setPaused(true);\n      clearInterval(tickTimer);\n      dispatch(pauseGame(true));\n    } else {\n      setPaused(false);\n      setTimer(setInterval(tickFunction, 100));\n      dispatch(pauseGame(false));\n    }\n  };\n\n  const PauseDisplay = () => {\n    if (paused === false) {\n      return (\n        <PauseContainer>\n          <ButtonFrame focusRipple key=\"Pause\" onClick={pauseClicked}>\n            <PauseImageSrc />\n          </ButtonFrame>\n        </PauseContainer>\n      );\n    } else {\n      return (\n        <PauseContainer>\n          <ButtonFrame focusRipple key=\"Pause\" onClick={pauseClicked}>\n            <PlayImageSrc />\n          </ButtonFrame>\n        </PauseContainer>\n      );\n    }\n  };\n\n  const PauseContainer = styled(\"span\")({\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n  });\n\n  const TitleContainer = styled(\"span\")({\n    display: \"block\",\n    margin: \"auto\",\n  });\n\n  const TopContainer = styled(\"div\")({\n    position: \"relative\",\n    top: 0,\n  });\n\n  const ButtonFrame = styled(ButtonBase)(({ theme }) => ({\n    height: 32,\n    width: 32,\n  }));\n\n  const PauseImageSrc = styled(\"span\")({\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    backgroundSize: \"cover\",\n    backgroundImage: `url(${pauseIcon})`,\n  });\n\n  const PlayImageSrc = styled(\"span\")({\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    height: 32,\n    width: 32,\n    backgroundSize: \"cover\",\n    backgroundImage: `url(${playIcon})`,\n  });\n\n  return (\n    <div>\n      <Container\n        maxWidth=\"false\"\n        disableGutters\n        sx={{\n          minWidth: 800,\n          maxWidth: 800,\n          minHeight: 500,\n          backgroundColor: \"lightgray\",\n          justifyContent: \"center\",\n          fontFamily: \"arial\",\n          textAlign: \"center\",\n          border: 3,\n          borderRadius: 2,\n          padding: 1,\n        }}\n      >\n        <TopContainer>\n          <TitleContainer>\n            <h2>React Type Quest</h2>\n          </TitleContainer>\n\n          <PauseDisplay />\n        </TopContainer>\n        <GameScreen />\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\n\nReactDOM.render(\n  <React.Fragment>\n    <CssBaseline />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}